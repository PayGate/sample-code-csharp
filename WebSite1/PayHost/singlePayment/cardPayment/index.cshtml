@*
    This is an example page of the process required for a PayGate PayHost Card Payment transaction.
*@
@using System.Text;
@using System.Globalization;
@{
    //ini_set("display_errors", 1);
    //ini_set("default_socket_timeout", 300);
    var initRequest = new StringBuilder();
    string responseTxt = "";
    var fullPath = GlobalUtility.getUriParts();
    var queryResponse = new PayHost.SinglePaymentResponse1();
    var r1 = new PayHost.CardPaymentResponseType();
    var htmlRedirectRaw = Html.Raw("");
    var htmlRedirectRaw1 = Html.Raw("");
    var htmlRedirectRaw2 = Html.Raw("");
    var htmlRedirect = "";
    string redirectUrl = "";
    var amountStr = "123,45";

    ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;

    //Set up Payhost Web Service
    PayHost.PayHOST payHOST = new PayHost.PayHOSTClient("PayHOSTSoap11");

    //Set up the intial form parameters
    var payGateId = "10011072130";
    var encryptionKey = "test";
    var reference = GlobalUtility.generateReference();

    /*
    * Set the session vars
    */
    SessionModel.pgid = payGateId;
    SessionModel.reference = reference;
    SessionModel.key = encryptionKey;

    //Set variables to be used for the serialization request
    PayHost.CardPaymentRequestType cardPaymentRequestType = new PayHost.CardPaymentRequestType();

    cardPaymentRequestType.Account = new PayHost.PayGateAccountType();
    cardPaymentRequestType.Account.Password = encryptionKey;
    cardPaymentRequestType.Account.PayGateId = payGateId;
    cardPaymentRequestType.Items = new string[2];

    //Customer fields are optional
    cardPaymentRequestType.Customer = new PayHost.PersonType();
    cardPaymentRequestType.Customer.Title = "Mr";
    cardPaymentRequestType.Customer.FirstName = "PayGate";
    cardPaymentRequestType.Customer.LastName = "Test";
    cardPaymentRequestType.Customer.Telephone = GlobalUtility.getStringArray("0861234567");
    cardPaymentRequestType.Customer.Mobile = GlobalUtility.getStringArray("0842573344");
    cardPaymentRequestType.Customer.Fax = GlobalUtility.getStringArray("08600999111");
    cardPaymentRequestType.Customer.Email = GlobalUtility.getStringArray("itsupport@paygate.co.za");

    //Card details - following order is critical to avoid Validation Error exception!!
    cardPaymentRequestType.ItemsElementName = new PayHost.ItemsChoiceType[]
    {
PayHost.ItemsChoiceType.CardNumber,
PayHost.ItemsChoiceType.CardExpiryDate
    };
    cardPaymentRequestType.Items = new string[] { "4000000000000002", "122020" };
    cardPaymentRequestType.CardIssueDate = "122016";
    cardPaymentRequestType.CardIssueNumber = "345";
    cardPaymentRequestType.CVV = "987";
    cardPaymentRequestType.BudgetPeriod = "0";


    //Redirects
    cardPaymentRequestType.Redirect = new PayHost.RedirectRequestType();
    cardPaymentRequestType.Redirect.NotifyUrl = fullPath[0] + "//" + fullPath[2] + "/PayHost/notify.cshtml";
    cardPaymentRequestType.Redirect.ReturnUrl = fullPath[0] + "//" + fullPath[2] + "/PayHost/result.cshtml";

    //Order details
    cardPaymentRequestType.Order = new PayHost.OrderType();
    cardPaymentRequestType.Order.MerchantOrderId = GlobalUtility.generateReference();
    cardPaymentRequestType.Order.Currency = PayHost.CurrencyType.ZAR;

    //Change decimal comma to decimal point if necessary
    var amount = amountStr.Replace(",", ".");
    //And convert rand to cents
    cardPaymentRequestType.Order.Amount = (int)(100 * Decimal.Parse(amount, CultureInfo.InvariantCulture));

    cardPaymentRequestType.Order.OrderItems = new PayHost.OrderItemType[1];
    cardPaymentRequestType.Order.OrderItems[0] = new PayHost.OrderItemType();
    cardPaymentRequestType.Order.OrderItems[0].ProductCode = "ABC123";
    cardPaymentRequestType.Order.OrderItems[0].ProductDescription = "Misc";
    cardPaymentRequestType.Order.OrderItems[0].ProductCategory = "misc";
    cardPaymentRequestType.Order.OrderItems[0].ProductRisk = "XX";
    cardPaymentRequestType.Order.OrderItems[0].OrderQuantity = UInt32.Parse("1");
    cardPaymentRequestType.Order.OrderItems[0].OrderQuantitySpecified = true;


    //And convert rand to cents as required
    cardPaymentRequestType.Order.OrderItems[0].UnitPrice = (int)(100 * Decimal.Parse(amount, CultureInfo.InvariantCulture));
    cardPaymentRequestType.Order.OrderItems[0].UnitPriceSpecified = true;
    cardPaymentRequestType.Order.OrderItems[0].Currency = "ZAR";

    var xmltxt = PayhostSOAP.getXMLText(cardPaymentRequestType);

    //Representation of the above input - for display only, not used
    var initRequestTxt = xmltxt;


    if (Request["btnSubmit"] != null)
    {
        try
        {
            var sprequest = new PayHost.SinglePaymentRequest
            {
                Item = cardPaymentRequestType
            };

            var sprequest1 = new PayHost.SinglePaymentRequest1(sprequest);

            queryResponse = payHOST.SinglePayment(sprequest1);
            r1 = queryResponse.SinglePaymentResponse.Item as PayHost.CardPaymentResponseType;

            //Illustrate some of the return values in the response box
            responseTxt = PayhostSOAP.getXMLText(r1);

            var htmlRedirect1 = "";

            if (r1.Redirect != null)
            {
                redirectUrl = r1.Redirect.RedirectUrl;
                htmlRedirect1 = "<form role=\"form\" class=\"form-horizontal text-left\" action=\"";
                htmlRedirect1 += r1.Redirect.RedirectUrl + "\" method=\"post\" target=\"iframetest\">";
                htmlRedirect1 = "";
                foreach (var item in r1.Redirect.UrlParams)
                {
                    htmlRedirect1 += "<input type=\"hidden\" name=\"" + item.key + "\" value=\"" + item.value + "\"/>" + Environment.NewLine;
                }
            }

            htmlRedirectRaw1 = Html.Raw(htmlRedirect1);

            if (r1.Redirect != null)
            {
                //We have a redirect request - add the necessary html
                htmlRedirect = "<div class=\"row\"><div class=\"col-sm-offset-4 col-sm-4\">";
                htmlRedirect += "<button id=\"showRedirectBtn\" class=\"btn btn-warning btn-block\" type=\"button\" data-toggle=\"collapse\" data-target=\"#redirectDiv\" aria-expanded=\"false\" aria-controls=\"redirectDiv\">Redirect Required</button></div></div><br>";
                htmlRedirect += "<div id=\"redirectDiv\" class=\"collapse well well-sm\"><div class=\"row\"><div class=\"col-sm-12\">";
                htmlRedirect += "<label for=\"response\" class=\"col-sm-3 sr-only\">Redirect</label>";
                htmlRedirect += "<textarea class=\"form-control\" rows=\"8\" cols=\"100\" id=\"redirect\">";
                htmlRedirect += Html.Raw(htmlRedirect1);
                htmlRedirect += "</textarea></div></div>";

                htmlRedirectRaw = Html.Raw(htmlRedirect);

                var htmlRedirect2 = "<form role=\"form\" class=\"form-horizontal text-left\" action=\"" + redirectUrl + "\" method=\"post\" target=\"iframetest\">" + htmlRedirect1;
                htmlRedirect2 += "<br><div class=\"form-group\"><div class=\"col-sm-offset-4 col-sm-4\"><img src=\"../../../lib/images/loader.gif\" alt=\"Processing\" class=\"initialHide\" id=\"submitLoader\">";
                htmlRedirect2 += "<input class=\"btn btn-success btn-block\" type=\"submit\" name=\"submitBtn\" id=\"doSubmitBtn\" value=\"submit\" data-toggle=\"modal\" data-target=\"#authModal\" />";
                htmlRedirect2 += "</div></div><br></form>";

                htmlRedirectRaw2 = Html.Raw(htmlRedirect2);
            }
        }
        catch (Exception sf)
        {
            /*
            * handle errors
            */
            var err = sf.Message;
            //textWriter.Close();
        }
    }
    else
    {


    }
}

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
    <title>PayHost - CardPayment</title>
    <link rel="stylesheet" href="../../../lib/css/bootstrap.min.css">
    <link rel="stylesheet" href="../../../lib/css/core.css">
</head>
<body>
    <div class="container-fluid" style="min-width: 320px;">
        <nav class="navbar navbar-inverse navbar-fixed-top">
            <div class="container-fluid">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="">
                        <img alt="PayGate" src="../../../lib/images/paygate_logo_mini.png" />
                    </a>
                    <span style="color: #f4f4f4; font-size: 18px; line-height: 45px; margin-right: 10px;"><strong>PayHost Card Payment</strong></span>
                </div>
                <div class="collapse navbar-collapse" id="navbar-collapse">
                    <ul class="nav navbar-nav">
                        <li class="active">
                            <a href="index.cshtml">Initiate</a>
                        </li>
                        <li>
                            <a href="../../singleFollowUp/query.cshtml">Query</a>
                        </li>
                        <li>
                            <a href="simple_initiate.cshtml">Simple initiate</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <div style="background-color:#80b946; text-align: center; margin-top: 51px; margin-bottom: 15px; padding: 4px;"><strong>Initiate CardPayment</strong></div>
        <div class="container">
            <form role="form" class="form-horizontal text-left" action="index.cshtml" method="post">
                <div class="form-group">
                    <div class="col-sm-offset-4 col-sm-4">
                        <button class="btn btn-primary btn-block" type="button" data-toggle="collapse" data-target="#requestDiv" aria-expanded="false" aria-controls="requestDiv">
                            Request
                        </button>
                    </div>
                </div>
                <div id="requestDiv" class="collapse well well-sm">
                    <div class="form-group">
                        <div class="col-sm-12">
                            <label for="request" class="col-sm-2 sr-only">Request</label>
                            <textarea name="request" cols="130" rows="45" id="request" class="form-control">
                                @initRequestTxt
							</textarea>
                        </div>
                    </div>
                </div>
                <br>
                <div class="form-group">
                    <div class="col-sm-offset-4 col-sm-4">
                        <img src="../../../lib/images/loader.gif" alt="Processing" class="initialHide" id="authLoader">
                        <input class="btn btn-success btn-block" id="doAuthBtn" type="submit" name="btnSubmit" value="Do Auth" formaction="index.cshtml" "    />
                        <input class="btn btn-success btn-block" id="showResultBtn" type="button" name="showResult" value="Show Results" data-toggle="collapse" data-target="#btnSubmitBlock" />
                    </div>
                </div>
                <br>
                <div id="btnSubmitBlock" class="collapse well well-sm">
                    <div class="form-group">
                        <div class="col-sm-offset-4 col-sm-4">
                            <button class="btn btn-primary btn-block" type="button" data-toggle="collapse" data-target="#responseDiv" aria-expanded="false" aria-controls="responseDiv">
                                Response
                            </button>
                        </div>
                    </div>
                    <div id="responseDiv" class="collapse well well-sm">
                        <div class="form-group">
                            <div class="col-sm-12">
                                <label for="response" class="col-sm-3 sr-only">Response</label>
                                <textarea name="response" cols="130" rows="8" id="response" class="form-control">
                                @responseTxt
							</textarea>
                            </div>
                        </div>
                    </div>
                    @htmlRedirectRaw
                </div>
            </form>



            @htmlRedirectRaw2

            <!-- Modal to house the iframe we use for 3D Secure authentication if returned from PayHost -->
            <div class="modal fade" id="authModal" tabindex="-1" role="dialog" aria-labelledby="3DAuthModal" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title" id="myModalLabel">3D Authentication</h4>
                        </div>
                        <div class="modal-body">
                            <iframe name="iframetest" id="iframetest" src="@redirectUrl" height="550" width="100%" frameborder="0" scrolling="auto"></iframe>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script type="text/javascript" src="../../../lib/js/jquery-1.10.2.min.js"></script>
    <script type="text/javascript" src="../../../lib/js/bootstrap.min.js"></script>
</body>
</html>
