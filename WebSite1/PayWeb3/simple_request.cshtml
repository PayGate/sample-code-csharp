@* 
    Does the same as request.cshtml
    Only the dispaly format is changed
*@

@using System.Text.RegularExpressions;
@using System.Text;
@{
    /*
     * Once the client is ready to be redirected to the payment page, we get all the information needed and initiate the transaction with PayGate.
     * This checks that all the information is valid and that a transaction can take place.
     * If the initiate is successful we are returned a request ID and a checksum which we will use to redirect the client to PayWeb3.
     */

    var optionalHtml = Html.Raw("");

    var mandatoryFields = new Dictionary<string, string>()
    {
        {"PAYGATE_ID", Regex.IsMatch(Request["PAYGATE_ID"], @"^\d{9,12}$") ? Request["PAYGATE_ID"] : "INVALID ID" },
        {"REFERENCE", Regex.IsMatch(Request["REFERENCE"], @"^pgtest_\d{14}$") ? Request["REFERENCE"] : "INVALID REFERENCE" },
        {"AMOUNT", Regex.IsMatch(Request["AMOUNT"], @"^\d*\.?\d{0,2}$") ? Request["AMOUNT"] : "INVALID AMOUNT" },
        {"CURRENCY", Regex.IsMatch(Request["CURRENCY"], @"^[A-Z]{3}$") ? Request["CURRENCY"] : "INVALID CURRENCY" },
        {"RETURN_URL", Regex.IsMatch(Request["RETURN_URL"], @"^(https?:\/\/)?([a-z0-9\.-]+):?\.?([/\w\.-]*)*\/?$") ? Request["RETURN_URL"] : "INVALID RETURN_URL" },
        {"TRANSACTION_DATE", Regex.IsMatch(Request["TRANSACTION_DATE"], @"^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$") ? Request["TRANSACTION_DATE"] : "INVALID TRANSACTION DATE" },
        {"LOCALE", Regex.IsMatch(Request["LOCALE"], @"^[a-z]{2}-[a-zA-Z]{2}$") ? Request["LOCALE"] : "INVALID LOCALE" },
        {"COUNTRY", Regex.IsMatch(Request["COUNTRY"], @"^[A-Z]{3}$") ? Request["COUNTRY"] : "INVALID COUNTRY" },
        {"EMAIL", Regex.IsMatch(Request["EMAIL"], @"^([a-z0-9_\.-]+)@([a-z0-9_\.-]+)\.([a-z\.]{2,6})$") ? Request["EMAIL"] : "INVALID EMAIL" },
    };

    SessionModel.pgid = mandatoryFields["PAYGATE_ID"];
    SessionModel.reference = mandatoryFields["REFERENCE"];
    SessionModel.key = Request["encryption_key"];

    var optionalFields = new Dictionary<string, string>()
    {
        {"PAY_METHOD", Request["PAY_METHOD"] != "" ? Regex.IsMatch(Request["PAY_METHOD"], @"^[a-zA-Z ]{0,10}$") ? Request["PAY_METHOD"] : "INVALID PAY METHOD" : "" },
        {"PAY_METHOD_DETAIL", Request["PAY_METHOD_DETAIL"] != "" ? Regex.IsMatch(Request["PAY_METHOD_DETAIL"], @"^[a-zA-Z ]{0,10}$") ? Request["PAY_METHOD_DETAIL"] : "INVALID PAY METHOD" : "" },
        {"NOTIFY_URL", Request["NOTIFY_URL"] != "" ? Regex.IsMatch(Request["NOTIFY_URL"], @"^(https?:\/\/)?([a-z0-9\.-]+):?\.?([/\w\.-]*)*\/?$") ? Request["NOTIFY_URL"] : "INVALID URL" : "" },
        {"USER1", Request["USER1"] != "" ? Regex.IsMatch(Request["USER1"], @"^[a-zA-Z \d]{0,10}$") ? Request["USER1"] : "INVALID FORMAT" : "" },
        {"USER2", Request["USER2"] != "" ? Regex.IsMatch(Request["USER2"], @"^[a-zA-Z \d]{0,10}$") ? Request["USER2"] : "INVALID FORMAT" : "" },
        {"USER3", Request["USER3"] != "" ? Regex.IsMatch(Request["USER3"], @"^[a-zA-Z \d]{0,10}$") ? Request["USER3"] : "INVALID FORMAT" : "" },
        {"VAULT", Request.Form.AllKeys.Contains("VAULT") ? Regex.IsMatch(Request["VAULT"], @"^[a-zA-Z \d]{0,10}$") ? Request["VAULT"] : "INVALID FORMAT" : "" },
        {"VAULT_ID", Request.Form.AllKeys.Contains("VAULT_ID") ? Regex.IsMatch(Request["VAULT_ID"], @"^[a-zA-Z \d]{0,10}$") ? Request["VAULT_ID"] : "INVALID FORMAT" : "" },
    };

    foreach (var item in optionalFields)
    {
        mandatoryFields.Add(item.Key, item.Value);
    }
    var data = mandatoryFields;

    var displayOptionalFields = false;


    foreach (var item in optionalFields)
    {
        if (data[item.Key] != "")
        {
            displayOptionalFields = true;
        }
    }

    if (displayOptionalFields)
    {
        StringBuilder optional = new StringBuilder();

        foreach (var item in optionalFields)
        {
            if (data[item.Key] != "")
            {
                optional.Append("<label for=\"");
                optional.Append(item.Key);
                optional.Append("\">");
                optional.Append(item.Key);
                optional.Append("</label><span id=\"");
                optional.Append(item.Key);
                optional.Append("\">");
                optional.Append(data[item.Key]);
                optional.Append("<span><br>");
            }
        }
        optionalHtml = Html.Raw(optional.ToString());
    }

    var encryption_key = Request["encryption_key"];

    /*
    * Initiate the PayWeb 3 helper class
    */
    var pw3 = new PaygatePayweb3();

    /* Set the encryption key of your PayGate PayWeb3 configuration
    */
    pw3.setEncryptionKey(encryption_key);

    /*
    * Set the array of fields to be posted to PayGate
    */
    pw3.setInitiateRequest(data);

    /*
    * Do the post to PayGate
    */
    var returnData = pw3.doInitiate();

    StringBuilder results = new StringBuilder();
    var resultsHtml = "";
    if (pw3.lastError == null)
    {
        //There is no error - continue
        foreach (var item in pw3.processRequest)
        {
            results.Append(item.Key + " = " + item.Value + "\n");
        }
        resultsHtml = results.ToString();
    }

    StringBuilder resultsForm = new StringBuilder();
    var resultsFormHtml = Html.Raw("");
    if (pw3.lastError != "")
    {
        //There is no error - continue
        //Check checksums match
        var isValid = pw3.validateChecksum(pw3.initiateResponse);
        if (isValid)
        {
            foreach (var item in pw3.processRequest)
            {
                resultsForm.Append("<input type=\"hidden\" name=\"" + item.Key + "\" value=\"" + item.Value + "\"/>");
            }
            resultsFormHtml = Html.Raw(resultsForm.ToString());
        }
        else
        {
            resultsForm.Append("The checksums do not match");
            resultsFormHtml = Html.Raw(resultsForm.ToString());
        }
    }
}

<html>
<head>
    <title>PayWeb 3 - Request</title>
    <style type="text/css">
        label {
            margin-top: 5px;
            display: inline-block;
            width: 150px;
        }
    </style>
</head>
<body>
    <form action="@PaygatePayweb3.process_url" method="post" name="paygate_process_form">
        <label for="PAYGATE_ID">PayGate ID</label>
        <span id="PAYGATE_ID">@data["PAYGATE_ID"]</span>
        <br>
        <label for="REFERENCE">Reference</label>
        <span id="REFERENCE">@data["REFERENCE"]</span>
        <br>
        <label for="AMOUNT">Amount</label>
        <span id="AMOUNT">@data["AMOUNT"]</span>
        <br>
        <label for="CURRENCY">Currency</label>
        <span id="CURRENCY">@data["CURRENCY"]</span>
        <br>
        <label for="RETURN_URL">Return URL</label>
        <span id="RETURN_URL">@data["RETURN_URL"]</span>
        <br>
        <label for="LOCALE">Locale</label>
        <span id="LOCALE">@data["LOCALE"]</span>
        <br>
        <label for="COUNTRY">Country</label>
        <span id="COUNTRY">@data["COUNTRY"]</span>
        <br>
        <label for="TRANSACTION_DATE">Transaction Date</label>
        <span id="TRANSACTION_DATE">@data["TRANSACTION_DATE"]</span>
        <br>
        <label for="EMAIL">Customer Email</label>
        <span id="EMAIL">@data["EMAIL"]</span>
        <br> @optionalHtml
        <label for="encryption_key">Encryption Key</label>
        <span id="encryption_key">@encryption_key</span>
        <br>
        <label style="vertical-align: top;" for="response">RESPONSE</label>
        <textarea class="form-control" rows="5" cols="100" id="response">@resultsHtml</textarea>
        <p>@resultsFormHtml</p>
        <br>
        <input class="btn btn-success btn-block" type="submit" name="btnSubmit" value="Redirect" />
        <br>
    </form>
</body>
</html>